package newStart.leetcode75;
//605. Can Place Flowers
/*
### –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–µ–Ω–∏—è:
1. **–ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–ª—É–º–±–µ (`flowerbed`).**
2. **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–∞–¥–∫–∏ —Ü–≤–µ—Ç–∫–∞ –≤ —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É:**
    - –õ–µ–≤–∞—è —Å–æ—Å–µ–¥–Ω—è—è —è—á–µ–π–∫–∞ (`flowerbed[i - 1]`) –ø—É—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞ –Ω–∞ —Å–∞–º–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –º–∞—Å—Å–∏–≤–∞.
    - –ü—Ä–∞–≤–∞—è —Å–æ—Å–µ–¥–Ω—è—è —è—á–µ–π–∫–∞ (`flowerbed[i + 1]`) –ø—É—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ –º–∞—Å—Å–∏–≤–∞.

3. –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å:
    - –°–∞–∂–∞–µ–º —Ü–≤–µ—Ç–æ–∫ –∏ —É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ `n`.
    - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —è—á–µ–π–∫—É (—Ç–∞–∫ –∫–∞–∫ —Ü–≤–µ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–º–∏).

4. –ï—Å–ª–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ `n` —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–≤–Ω–æ 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `true` (–≤—Å–µ —Ü–≤–µ—Ç—ã –ø–æ—Å–∞–∂–µ–Ω—ã).
5. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `false`, –µ—Å–ª–∏ `n > 0`.

 */
public class CanPlaceFlowers {
    public static void main(String[] args) {
//        int[] flowerbed = {1,0,0,0,0,0,1};
        int[] flowerbed2 = {1,0,0,0,0,1};
        int n = 2;
        CanPlaceFlowers canPlaceFlowers = new CanPlaceFlowers();
        boolean result = canPlaceFlowers.canPlaceFlowers(flowerbed2, n);
        System.out.println(result);
    }
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if (n == 0) return true; // –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–∞–∂–∞—Ç—å —Ü–≤–µ—Ç—ã, —Å—Ä–∞–∑—É true

        for (int i = 0; i < flowerbed.length; i++) {
            if (flowerbed[i] == 0) {
                boolean leftEmpty = (i == 0) || (flowerbed[i - 1] == 0);
                boolean rightEmpty = (i == flowerbed.length - 1) || (flowerbed[i + 1] == 0);

                if (leftEmpty && rightEmpty) {
                    flowerbed[i] = 1; // –°–∞–¥–∏–º —Ü–≤–µ—Ç–æ–∫
                    n--; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤

                    if (n == 0) return true; // –í—Å–µ —Ü–≤–µ—Ç—ã –ø–æ—Å–∞–∂–µ–Ω—ã

                    i++; // üî• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —è—á–µ–π–∫—É, —Ç.–∫. —É–∂–µ –ø–æ—Å–∞–¥–∏–ª–∏ —Ä—è–¥–æ–º
                }
            }
        }
        return n == 0; // –ï—Å–ª–∏ –ø–æ—Å–∞–¥–∏–ª–∏ –≤—Å–µ —Ü–≤–µ—Ç—ã, true, –∏–Ω–∞—á–µ false
    }
}
