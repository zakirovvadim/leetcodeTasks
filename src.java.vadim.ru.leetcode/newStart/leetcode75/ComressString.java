package newStart.leetcode75;
/*
Ключевые моменты:

Используем два указателя:
i - для чтения исходного массива
result - для записи сжатых данных
Алгоритм:
Идем по массиву, подсчитывая повторяющиеся символы
Записываем символ и (если нужно) количество его повторений
Количество разбиваем на отдельные цифры для записи
Особенности:
Модифицируем исходный массив chars на месте
Возвращаем длину сжатого массива
Это решение соответствует требованиям задачи и работает за O(n) времени с O(1) дополнительной памятью.
 */
public class ComressString {

    public static void main(String[] args) {
        char[] chars = {'a', 'a', 'b', 'b', 'c', 'c', 'c'};
        System.out.println(compress(chars));
    }

    public static int compress(char[] chars) {
        // Указатель для записи сжатых данных (новая длина массива)
        int result = 0;

        // Указатель для чтения исходного массива
        int i = 0;

        // Проходим по всему массиву символов
        while (i < chars.length) {
            // Текущий символ, который мы будем сжимать
            char letter = chars[i];

            // Счётчик повторений текущего символа
            int count = 0;

            // Пока встречаются одинаковые символы подряд
            while (i < chars.length && chars[i] == letter) {
                count++;  // Увеличиваем счётчик повторений
                i++;      // Переходим к следующему символу
            }

            // Записываем текущий символ в результирующую позицию
            chars[result] = letter;

            // Перемещаем указатель записи на следующую позицию
            result++;

            // Если символ повторялся больше 1 раза
            if (count > 1) {
                // Преобразуем количество повторений в строку
                String c = String.valueOf(count);

                // Записываем каждую цифру числа по отдельности
                for (int j = 0; j < c.length(); j++) {
                    chars[result] = c.charAt(j);
                    result++;
                }
            }
        }

        // Возвращаем новую длину сжатого массива
        return result;
    }
}
